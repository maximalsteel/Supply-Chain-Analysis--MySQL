use Supply_chain;

#Q1 Read the data from all the tables
alter table Product add foreign key(SupplierId) references Supplier(Id);
alter table Orders add foreign key  (CustomerId) references Customer(Id);
alter table OrderItem add foreign key(ProductId) references Product(Id);
alter table OrderItem add foreign key(OrderId) references Orders(Id);
select * from customer;
select * from Orders;
select * from Supplier;
select * from Product;


select * from OrderItem;
# Q2 Find the country-wise count of customers. 
select country,count(*) from customer
group by country;

# Q3 Display the products that are not discontinued. 
select ProductName,IsDiscontinued from product
where IsDiscontinued = 0;

# Q4 Display the list of companies along with the product name that they are supplying. 
USE Supply_chain;

SELECT p.ProductName, s.CompanyName
FROM Product p
JOIN Supplier s ON p.SupplierId = s.Id;

# Q5 Display customer information about who stays in 'Mexico'.
select * from customer where country = 'Mexico';

# Q6 Display the costliest item that is ordered by the customer.
select max(TotalAmount) from orders;

# Q7 Display supplier ID who owns the highest number of products.
SELECT SupplierId, COUNT(*) AS ProductCount
FROM Product
GROUP BY SupplierId
ORDER BY ProductCount DESC
LIMIT 1;

# Q8 Display month-wise and year-wise counts of the orders placed.
SELECT YEAR(OrderDate) AS OrderYear, MONTH(OrderDate) AS OrderMonth, COUNT(*) AS OrderCount
FROM Orders
GROUP BY OrderYear, OrderMonth
ORDER BY OrderYear, OrderMonth;

# Q9 Which country has the maximum number of suppliers?
select country,count(Id) as Number_of_Suppliers from supplier
group by Country
ORDER BY Number_of_Suppliers DESC
LIMIT 1;

# Q10 Which customers did not place any orders?
USE Supply_chain;

SELECT c.Id, c.FirstName, c.LastName
FROM Customer c
LEFT JOIN Orders o ON c.Id = o.CustomerId
WHERE o.CustomerId IS NULL;

# Section B: Level 2 Questions:
USE Supply_chain;

#Q1 Arrange the Product ID and Name based on the high demand by the customer.
SELECT p.Id AS ProductId, p.ProductName, SUM(oi.Quantity) AS TotalQuantity
FROM OrderItem oi
JOIN Product p ON oi.ProductId = p.Id
GROUP BY p.Id, p.ProductName
ORDER BY TotalQuantity DESC;

# Q2 Display the total number of orders delivered every year
select YEAR(OrderDate) as years, count(Id)
from orders group by years;

# Q3 Calculate year-wise total revenue. 
select YEAR(OrderDate) as years, sum(TotalAmount) as Total_Revenue
from orders group by years;

# Q4 Display the customer details whose order amount is maximum including his past orders. 
SELECT CustomerId, SUM(TotalAmount) AS TotalSpent
FROM Orders
GROUP BY CustomerId
ORDER BY TotalSpent DESC
LIMIT 1;

#Alternate Solution-- Using CTE and Subquery to get the CustomerId with the maximum total order amount
WITH MaxCustomer AS (
    SELECT CustomerId
    FROM Orders
    GROUP BY CustomerId
    ORDER BY SUM(TotalAmount) DESC
    LIMIT 1
)
-- Retrieve the details of the customer and all their past orders
SELECT c.Id, c.FirstName, c.LastName, c.City, c.Country, c.Phone, o.Id AS OrderId, o.OrderDate, o.OrderNumber, o.TotalAmount
FROM Customer c
JOIN Orders o ON c.Id = o.CustomerId
WHERE c.Id = (SELECT CustomerId FROM MaxCustomer);

# Q5 Display the total amount ordered by each customer from high to low.
select CustomerId,SUM(TotalAmount) AS TotalAmount from orders
group by CustomerId order by TotalAmount desc;

# The sales and marketing department of this company wants to find out how frequently customers do business with them. (Answer Q 6 for the same) 
#Q6	Approach - List the current and previous order dates for each customer.

select CustomerId , OrderDate as Current_Order_Date, Lag(OrderDate)over(partition by CustomerId Order by OrderDate)
as Previous_Order_Date from orders order by CustomerId, OrderDate;

# Q7 Find out the top 3 suppliers in terms of revenue generated by their products. 
SELECT
    s.Id AS SupplierId,
    s.CompanyName,
    SUM(oi.Quantity * oi.UnitPrice) AS TotalRevenue
FROM OrderItem oi
JOIN Product p ON oi.ProductId = p.Id
JOIN Supplier s ON p.SupplierId = s.Id
GROUP BY s.Id, s.CompanyName
ORDER BY TotalRevenue DESC
LIMIT 3;

# Q8
WITH CustomerOrders AS (
    SELECT 
        c.Id AS CustomerId,
        c.FirstName,
        c.LastName,
        c.City,
        c.Country,
        c.Phone,
        o.OrderDate,
        ROW_NUMBER() OVER (PARTITION BY c.Id ORDER BY o.OrderDate ASC) AS OrderAsc,
        ROW_NUMBER() OVER (PARTITION BY c.Id ORDER BY o.OrderDate DESC) AS OrderDesc
    FROM 
        Customer c
    JOIN 
        Orders o ON c.Id = o.CustomerId
),
FirstLastOrders AS (
    SELECT
        CustomerId,
        FirstName,
        LastName,
        City,
        Country,
        Phone,
        MAX(CASE WHEN OrderAsc = 1 THEN OrderDate END) AS FirstOrderDate,
        MAX(CASE WHEN OrderDesc = 1 THEN OrderDate END) AS LastOrderDate
    FROM 
        CustomerOrders
    GROUP BY 
        CustomerId, FirstName, LastName, City, Country, Phone
)
SELECT 
    CustomerId,
    FirstName,
    LastName,
    City,
    Country,
    Phone,
    LastOrderDate
FROM 
    FirstLastOrders
WHERE 
    LastOrderDate <> FirstOrderDate
ORDER BY 
    LastOrderDate DESC;


# Q9 Display the product name and supplier name for each order
SELECT
    o.Id AS OrderId,
    p.ProductName,
    s.CompanyName AS SupplierName
FROM OrderItem oi
JOIN Product p ON oi.ProductId = p.Id
JOIN Supplier s ON p.SupplierId = s.Id
JOIN Orders o ON oi.OrderId = o.Id
ORDER BY o.Id;

# Section C 

#Q1 Fetch the customer details who ordered more than 10 products in a single order.
SELECT c.Id, c.FirstName, c.LastName, c.City, c.Country, c.Phone, SUM(oi.Quantity) AS TotalQuantity
FROM Customer c
JOIN Orders o ON c.Id = o.CustomerId
JOIN OrderItem oi ON o.Id = oi.OrderId
GROUP BY c.Id, c.FirstName, c.LastName, c.City, c.Country, c.Phone, o.Id
HAVING SUM(oi.Quantity) > 10;

# Q2 Display all the product details with the ordered quantity size as 1. 
select * from product p
join orderitem oi on p.id = oi.ProductId
where oi.Quantity = 1;

# Q3 Display the companies that supply products whose cost is above 100.
select s.CompanyName from supplier as s
join product p on s.Id = p.SupplierId
where UnitPrice > 100;

# Q4 Create a combined list to display customers and supplier lists as per the below format.(REFER WORD DOC FOR IMAGE.)
SELECT
    'Customer' AS Type,
    CONCAT(c.FirstName, ' ', c.LastName) AS ContactName,
    c.City,
    c.Country,
    c.Phone
FROM Customer c

UNION

SELECT
    'Supplier' AS Type,
    s.ContactName,
    s.City,
    s.Country,
    s.Phone
FROM Supplier s

ORDER BY Type, ContactName;

# Q5 Display the customer list who belongs to the same city and country arranged country-wise
WITH CityCountryCounts AS (
    SELECT 
        City, 
        Country,
        COUNT(*) AS CustomerCount
    FROM Customer
    GROUP BY City, Country
    HAVING COUNT(*) > 1
)

SELECT 
    c.FirstName, 
    c.LastName, 
    c.City, 
    c.Country, 
    c.Phone
FROM Customer c
JOIN CityCountryCounts ccc ON c.City = ccc.City AND c.Country = ccc.Country
ORDER BY c.Country, c.City, c.LastName, c.FirstName;

## Section D
USE Supply_chain;
# Q1 The company sells the products at different discount rates.
#    Refer actual product price in the product table and the selling price in the order item table. 
#    Write a query to find out the total amount saved in each order then display the orders from highest to lowest amount saved. 
SELECT 
    o.Id AS OrderId, 
    SUM((p.UnitPrice - oi.UnitPrice) * oi.Quantity) AS TotalAmountSaved
FROM 
    Orders o
JOIN 
    OrderItem oi ON o.Id = oi.OrderId
JOIN 
    Product p ON oi.ProductId = p.Id
GROUP BY 
    o.Id
HAVING 
    TotalAmountSaved > 0
ORDER BY 
    TotalAmountSaved DESC;

# Q2 Mr. Kavin wants to become a supplier. He got the database of "Richard's Supply" for reference. Help him to pick: 

# a) List a few products that he should choose based on demand.
select s.CompanyName,ProductName,oi.Quantity as demand from orderitem oi
join product p on oi.ProductId = p.Id
JOIN supplier s on p.SupplierId = s.Id
order by Quantity desc
limit 10;

# b) Who will be the competitors for him for the products suggested in the above questions? 
select s.CompanyName,sum(oi.Quantity) as demand from orderitem oi
join product p on oi.ProductId = p.Id
JOIN supplier s on p.SupplierId = s.Id
group by s.CompanyName;
##

## Q3 Create a combined list to display customers' and suppliers' details considering the following criteria 
USE Supply_chain;

-- Part a: Customers and suppliers from the same country
SELECT 
    'Customer' AS Type,
    c.FirstName AS ContactName,
    c.City,
    c.Country,
    c.Phone
FROM 
    Customer c
JOIN 
    Supplier s ON c.Country = s.Country

UNION

SELECT 
    'Supplier' AS Type,
    s.ContactName AS ContactName,
    s.City,
    s.Country,
    s.Phone
FROM 
    Customer c
JOIN 
    Supplier s ON c.Country = s.Country

UNION

-- Part b: Customers who do not have a supplier in their country
SELECT 
    'Customer' AS Type,
    c.FirstName AS ContactName,
    c.City,
    c.Country,
    c.Phone
FROM 
    Customer c
WHERE 
    c.Country NOT IN (SELECT s.Country FROM Supplier s)

UNION

-- Part c: Suppliers who do not have customers in their country
SELECT 
    'Supplier' AS Type,
    s.ContactName AS ContactName,
    s.City,
    s.Country,
    s.Phone
FROM 
    Supplier s
WHERE 
    s.Country NOT IN (SELECT c.Country FROM Customer c)

ORDER BY 
    Type, ContactName;
    
#Q4 Find out for which products, the UK is dependent on other countries for the supply. 
#   List the countries which are supplying these products in the same list.


SELECT 
    p.ProductName, 
    s.Country AS SupplyingCountry
FROM 
    Product p
JOIN 
    Supplier s ON p.SupplierId = s.Id
WHERE 
    s.Country <> 'UK'
ORDER BY 
    p.ProductName, s.Country;

